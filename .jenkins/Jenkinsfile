pipeline {
  agent any

  environment {
    AWS_REGION = credentials("AWS_REGION")
    ECR_REPOSITORY = credentials("ECR_REPOSITORY")
    AWS_ACCOUNT_ID = credentials("AWS_ACCOUNT_ID")
    AWS_ACCESS_KEY_ID = credentials("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = credentials("AWS_SECRET_ACCESS_KEY")
    IMAGE_TAG = credentials("IMAGE_TAG")
    MLOPS_HOST = credentials("MLOPS_HOST")
  }

  stages {
    stage("Continuous Integration: Lint & Test") {
      steps {
        echo "Linting and testing the code.."
        sh 'echo "Lint placeholder - replace with flake8 or pylint"'
        sh 'echo "Unit test placeholder - replace with pytest or unittest"'
      }
    }

    stage("Docker: Login to AWS ECR") {
      steps {
        echo "Logging into AWS ECR"
        withEnv([
          "AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}",
          "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}",
          "AWS_REGION=${env.AWS_REGION}"
        ]) {
          sh 'aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"'
          sh 'aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"'
          sh 'aws configure set region "$AWS_REGION"'
          sh 'aws ecr get-login-password | docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"'
        }
      }
    }

    stage('Pull Base Image') {
      steps {
        script {
          def baseImage = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}-base-deps:${IMAGE_TAG}"
          sh """
            docker pull $baseImage || echo "Base image not found, will build it."
          """
        }
      }
    }

    stage('Build Base Image') {
      when {
        expression {
          // Only build base image if not found in previous stage
          return sh(script: "docker images -q ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}-base-deps:${IMAGE_TAG} || true", returnStdout: true).trim() == ""
        }
      }
      steps {
        timeout(time: 60, unit: 'MINUTES') {
          sh '''
            set -euo pipefail

            (while true; do echo "[HEARTBEAT] $(date): Building base dependencies image..."; sleep 60; done) &
            HEARTBEAT_PID=$!

            cleanup() {
              echo "Stopping heartbeat..."
              kill $HEARTBEAT_PID 2>/dev/null || true
            }

            trap cleanup EXIT

            echo "[INFO] Starting docker build..."
            docker build --progress=plain --target base-deps -t "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY-base-deps:${IMAGE_TAG}" .

            echo "[INFO] Pushing to ECR..."
            docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY-base-deps:${IMAGE_TAG}"
          '''
        }
      }
    }

    stage('Build App Image') {
      steps {
        timeout(time: 30, unit: 'MINUTES') {
          sh '''
            set -euo pipefail

            (while true; do echo "[HEARTBEAT] $(date): Building app image..."; sleep 60; done) &
            HEARTBEAT_PID=$!

            cleanup() {
              echo "Stopping heartbeat..."
              kill $HEARTBEAT_PID 2>/dev/null || true
            }

            trap cleanup EXIT

            echo "[INFO] Starting docker build..."
            docker build --progress=plain -t "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG" .

            echo "[INFO] Pushing to ECR..."
            docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG"
          '''
        }
      }
    }

    stage("Deploy with Ansible (Group Vars Driven)") {
      steps {
        echo "Deploying to EC2 using Ansible group_vars..."
        sshagent(["ssh_key"]) {
          sh '''
            ANSIBLE_HOST_KEY_CHECKING=False \
            ansible-playbook -i inventory.ini deploy_mlops.yml --vault-password-file vault_pass.txt
          '''
        }
      }
    }

  }

  post {
    always {
      echo "Cleaning up Docker..."
      sh 'docker system prune -f'
    }
    failure {
      echo "Build or Deployment failed"
    }
    success {
      echo "Deployment completed successfully"
    }
  }
}
