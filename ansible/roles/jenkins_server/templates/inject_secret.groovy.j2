import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.domains.*
import hudson.util.Secret
import jenkins.model.Jenkins

def store = Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

{% if item.secret_type == "string" %}
import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl

def secret = new StringCredentialsImpl(
  CredentialsScope.GLOBAL,
  "{{ item.secret_id }}",
  "{{ item.secret_description }}",
  Secret.fromString("{{ item.secret_value }}")
)
{% elif item.secret_type == "username_password" %}
import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl

def secret = new UsernamePasswordCredentialsImpl(
  CredentialsScope.GLOBAL,
  "{{ item.secret_id }}",
  "{{ item.secret_description }}",
  "{{ item.username }}",
  "{{ item.password }}"
)
{% elif item.secret_type == "ssh" %}
import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey
import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey.FileOnMasterPrivateKeySource

def privateKeySource = new FileOnMasterPrivateKeySource("{{ item.private_key_path }}")
def secret = new BasicSSHUserPrivateKey(
  CredentialsScope.GLOBAL,
  "{{ item.secret_id }}",
  "{{ item.username }}",
  privateKeySource,
  null,
  "{{ item.secret_description }}"
)
{% endif %}

store.addCredentials(Domain.global(), secret)
println("Secret '{{ item.secret_id }}' injected")
